:: A type that can be used as a floating-point numeric type, usually having
:: been declared with a `:numeric` type declaration.
::
:: This is a subtype of the more general `Numeric` trait.
:trait val FloatingPoint(T FloatingPoint(T)'val)
  :is Numeric(T)
  :is FloatingPoint.Representable
  :is FloatingPoint.Bounded(T)
  :is FloatingPoint.Arithmetic(T)
  :is FloatingPoint.Comparable(T)

:: A type which conveys information about the machine-level representation
:: of a floating-point numeric type, including the standard information
:: about general numeric types, as well as floating-point-specific information.
:trait val FloatingPoint.Representable
  :is Numeric.Representable

  :: The number of bits representing the exponent.
  :: Note that total `bit_width` will be `exp_bit_width` + `sig_bit_width` + 1.
  :fun non exp_bit_width U8

  :: The number of bits representing the significand (a.k.a. mantissa).
  :: Note that total `bit_width` will be `exp_bit_width` + `sig_bit_width` + 1.
  ::
  :: The significand does not include the implicit/hidden leading bit,
  :: because that implicit bit is not actually in the memory representation.
  :fun non sig_bit_width U8

:: A type that can decode the low-level details of a floating-point number
:: whose internal representation follows the IEEE754 standard.
::
:: The first type argument is expected to be an unsigned integer type and will
:: be used to represent the raw bits of the entire value, as well as the
:: bits of the significand (which is almost as wide as the entire value).
::
:: The second type argument is expected to be a signed integer type and will
:: be used to represent the base-2 exponent of the value.
:trait val FloatingPoint.IEEE754(B Integer(B)'val, E Integer(E)'val)
  :is FloatingPoint.Representable

  :: Create a new floating-point value from the raw bits representation.
  :fun non from_bits(bits B) @'val

  :: Get the raw bits representation of the value, as an integer.
  :fun val bits B

  :: A bit mask highlighting only the bits encoding the significand.
  ::
  :: Note that if you use this bit mask to obtain the value's significand bits,
  :: this is not necessarily the same as the actual signficand value,
  :: which may include an implicit leading bit depending on the value.
  ::
  :: Use `significand_with_base_2_exponent` instead if you wish to decode
  :: the value to obtain the actual significand and base-2 exponent values.
  :fun non sig_bit_mask B

  :: A bit mask highlighting only the bits encoding the exponent.
  ::
  :: Note that if you use this bit mask to obtain the value's exponent bits,
  :: this is not necessarily the same as the actual exponent value,
  :: because the exponent is encoded with implicit bias and normalization.
  ::
  :: Use `significand_with_base_2_exponent` instead if you wish to decode
  :: the value to obtain the actual significand and base-2 exponent values.
  :fun non exp_bit_mask B

  :: A bit mask highlighting only the bit encoding the sign.
  ::
  :: If you use this bit mask to obtain the value's sign bits,
  :: then a zero check can test for negative or positive sign of the value,
  :: though this bit check isn't relevant for NaN values.
  ::
  :: Use `has_negative_sign_bit` or `has_positive_sign_bit` for a convenient
  :: way to access the result of this bit check.
  :fun non sign_bit_mask B

  :: Return `True` if the sign bit is set (indicating negative).
  :: Note that this bit check isn't relevant for NaN values.
  :fun val has_negative_sign_bit Bool: @bits.bit_and(@sign_bit_mask).is_nonzero

  :: Return `True` if the sign bit is unset (indicating positive).
  :: Note that this bit check isn't relevant for NaN values.
  :fun val has_positive_sign_bit Bool: @bits.bit_and(@sign_bit_mask).is_zero

  :: Decode the significand and exponent from the IEEE-754-encoded bits.
  ::
  :: The actual value represented (ignoring the sign bit) can be understood
  :: to be the significand multiplied by the given exponent's power of 2.
  :: The value would then be understood to be negated if the sign bit is set.
  ::
  :: If the value is not a finite number (i.e. if it `is_infinite` or `is_nan`),
  :: then the numbers returned by this function have no semantic meaning,
  :: so those special cases should be accounted for in some other way
  :: by the caller (likely, by avoiding calling this method in that case).
  :fun val significand_with_base_2_exponent Pair(B, E)

:: A type that can return certain special edge-case floating-point values.
:trait val FloatingPoint.Bounded(T FloatingPoint(T)'val)
  :is Numeric.Bounded(T)

  :: Return a value signifying positive infinity.
  :fun non infinity T

  :: Return a value signifying negative infinity.
  :fun non neg_infinity T

  :: Return a value signifying NaN (i.e. "not a number").
  ::
  :: Note that the floating-point representation allows for multiple distinct
  :: values that all signify NaN, but are not equal to one another,
  :: so the correct way to check for NaN is to use the `is_nan` method,
  :: rather than to check equivalence with the value returned by this method.
  :fun non nan T

  :: The difference between 1.0 and the next larger representable number.
  :: This is the unit of least precision in the semi-open range [1.0, 2.0).
  :fun non epsilon T

  :: The difference between 1.0 and the next smaller representable number.
  :: This is the unit of least precision in the semi-open range [0.5, 1.0).
  :fun non half_epsilon T

:: A type which can do floating-point arithmetic operations of the given type T,
:: each operation producing a result of that same type T.
:trait val FloatingPoint.Arithmetic(T FloatingPoint(T)'val)
  :is Numeric.Arithmetic(T)

  :: Get the natural logarithm of this value.
  :: That is, the logarithm using the transcendental constant "e" as the base.
  :fun val log T

  :: Get the base-2 logarithm of this value.
  :fun val log2 T

  :: Get the base-10 logarithm of this value.
  :fun val log10 T

  :: Exponentiate this value with the given exponent value (the given "power").
  :fun val pow(exp T) T

:: A floating-point type which is comparable to other values of the same type,
:: and can be checked to see if it is or is not one of the special values.
:trait val FloatingPoint.Comparable(T FloatingPoint(T)'val)
  :is Numeric.Comparable(T)

  :: Return true if the value signifies NaN.
  :fun val is_nan Bool

  :: Return true if the value is positive or negative infinity.
  :fun val is_infinite Bool

  :: Return true if the value is neither NaN nor positive or negative infinity.
  :fun val is_finite Bool

:: A type which can be formatted as the given integer type T.
:trait val FloatingPoint.Formattable(T FloatingPoint(T)'val)
  :fun as_val T

  :fun format
    // TODO: Specialized 32-bit implementation.
    FloatingPoint.Format(F64)._new(_FormattableF64.from_f64(@as_val.f64))

  :is IntoString
  :fun into_string(out String'ref): @format.shortest.into_string(out)
  :fun into_string_space: @format.shortest.into_string_space

:: This trait isn't meant to be used externally. It's just a base implementation
:: of methods to be copied into every new floating-point 32-bit `:numeric` type.
:trait val FloatingPoint.BaseImplementation32 // TODO: don't use :trait for this... `common`?
  :: An internal method for converting a `box` number value to a `val` one.
  :: This is sometimes needed for `:fun box` uses of `val` methods.
  :: It is safe because no builtin numeric type can have interior mutability.
  :: TODO: Remove this hack in favor of a more generalized mechanism
  :: for marking types which have no possibility of interior mutability,
  :: allowing them to treat any `box` reference as a `val` reference.
  :fun as_val @'val: compiler intrinsic

  :is FloatingPoint.IEEE754(U32, I8)
  :fun non from_bits(bits U32) @'val: compiler intrinsic
  :fun val bits U32: compiler intrinsic
  :fun non sig_bit_mask U32:  0b00000000011111111111111111111111
  :fun non exp_bit_mask U32:  0b01111111100000000000000000000000
  :fun non sign_bit_mask U32: 0b10000000000000000000000000000000

  :: Decode the significand and exponent from the IEEE-754-encoded bits.
  ::
  :: The actual value represented (ignoring the sign bit) can be understood
  :: to be the significand multiplied by the given exponent's power of 2.
  :: The value would then be understood to be negated if the sign bit is set.
  ::
  :: If the value is not a finite number (i.e. if it `is_infinite` or `is_nan`),
  :: then the numbers returned by this function have no semantic meaning,
  :: so those special cases should be accounted for in some other way.
  :fun val significand_with_base_2_exponent Pair(U32, I8)
    sig_bits = @bits.bit_and(@sig_bit_mask)
    exp_bits = @bits.bit_and(@exp_bit_mask).bit_shr(@sig_bit_width)

    // Exponents are encoded with a bias value added that raises all negative
    // exponents into positive integers, and positive exponents raised further.
    // In other words, the bias is what value a zero exponent is encoded as.
    exp_bias = I8.one.bit_shl(@exp_bit_width - 1) - 1

    if exp_bits.is_zero (
      // When the exponent bits are zero, it is treated as if it was "one"
      // (i.e. the most negative representable exponent when bias is applied),
      // and the significand bits are passed through directly without the
      // implicit leading bit being applied as it is for "normalized" numbers.
      //
      // This space of numbers are known as "subnormal" numbers, and they are
      // used to represent numbers which are otherwise too small to represent.
      Pair(U32, I8).new(
        sig_bits
        I8.one - exp_bias - @sig_bit_width.i8
      )
    |
      // Otherwise, we are in the space of "normalized" numbers, where the
      // exponent bits are used as normal (with bias-correction) and the
      // significand bits have the implicit leading bit applied to raise them,
      // which is skipped during encoding to allow for the "subnormal" space.
      Pair(U32, I8).new(
        sig_bits.bit_or(U32.one.bit_shl(@sig_bit_width))
        exp_bits.i8 - exp_bias - @sig_bit_width.i8
      )
    )

  :is Numeric.Convertible

  :is FloatingPoint.Representable
  :fun non exp_bit_width U8: 8
  :fun non sig_bit_width U8: 23

  :is FloatingPoint.Bounded(@)
  :fun non zero @'val:   compiler intrinsic
  :fun non one @'val:    compiler intrinsic
  :fun non max_value:    @from_bits(0x7f7f_ffff)
  :fun non min_value:    @from_bits(0xff7f_ffff)
  :fun non infinity:     @from_bits(0x7f80_0000)
  :fun non neg_infinity: @from_bits(0xff80_0000)
  :fun non nan:          @from_bits(0x7fc0_0000)
  :fun non epsilon:      @from_bits(0x3400_0000) // 2 ** -23
  :fun non half_epsilon: @from_bits(0x3380_0000) // 2 ** -24

  :is FloatingPoint.Arithmetic(@)
  :fun val log @: compiler intrinsic
  :fun val log2 @: compiler intrinsic
  :fun val log10 @: compiler intrinsic
  :fun val pow(y @) @: compiler intrinsic

  :is FloatingPoint.Comparable(@)
  :fun val is_nan
    @bits.bit_and(0x7f80_0000) == 0x7f80_0000 && // exponent
    @bits.bit_and(0x007f_ffff) != 0              // mantissa
  :fun val is_infinite
    @bits.bit_and(0x7f80_0000) == 0x7f80_0000 && // exponent
    @bits.bit_and(0x007f_ffff) == 0              // mantissa
  :fun val is_finite
    @bits.bit_and(0x7f80_0000) != 0x7f80_0000 // exponent

  :is FloatingPoint.Formattable(@)

:: This trait isn't meant to be used externally. It's just a base implementation
:: of methods to be copied into every new floating-point 64-bit `:numeric` type.
:trait val FloatingPoint.BaseImplementation64 // TODO: don't use :trait for this... `common`?
  :: An internal method for converting a `box` number value to a `val` one.
  :: This is sometimes needed for `:fun box` uses of `val` methods.
  :: It is safe because no builtin numeric type can have interior mutability.
  :: TODO: Remove this hack in favor of a more generalized mechanism
  :: for marking types which have no possibility of interior mutability,
  :: allowing them to treat any `box` reference as a `val` reference.
  :fun as_val @'val: compiler intrinsic

  :is FloatingPoint.IEEE754(U64, I16)
  :fun non from_bits(bits U64) @'val: compiler intrinsic
  :fun val bits U64: compiler intrinsic
  :fun non sig_bit_mask U64
    0b0000000000001111111111111111111111111111111111111111111111111111
  :fun non exp_bit_mask U64
    0b0111111111110000000000000000000000000000000000000000000000000000
  :fun non sign_bit_mask U64
    0b1000000000000000000000000000000000000000000000000000000000000000

  :: Decode the significand and exponent from the IEEE-754-encoded bits.
  ::
  :: The actual value represented (ignoring the sign bit) can be understood
  :: to be the significand multiplied by the given exponent's power of 2.
  :: The value would then be understood to be negated if the sign bit is set.
  ::
  :: If the value is not a finite number (i.e. if it `is_infinite` or `is_nan`),
  :: then the numbers returned by this function have no semantic meaning,
  :: so those special cases should be accounted for in some other way.
  :fun val significand_with_base_2_exponent Pair(U64, I16)
    sig_bits = @bits.bit_and(@sig_bit_mask)
    exp_bits = @bits.bit_and(@exp_bit_mask).bit_shr(@sig_bit_width)

    // Exponents are encoded with a bias value added that raises all negative
    // exponents into positive integers, and positive exponents raised further.
    // In other words, the bias is what value a zero exponent is encoded as.
    exp_bias = I16.one.bit_shl(@exp_bit_width - 1) - 1

    if exp_bits.is_zero (
      // When the exponent bits are zero, it is treated as if it was "one"
      // (i.e. the most negative representable exponent when bias is applied),
      // and the significand bits are passed through directly without the
      // implicit leading bit being applied as it is for "normalized" numbers.
      //
      // This space of numbers are known as "subnormal" numbers, and they are
      // used to represent numbers which are otherwise too small to represent.
      Pair(U64, I16).new(
        sig_bits
        I16.one - exp_bias - @sig_bit_width.i16
      )
    |
      // Otherwise, we are in the space of "normalized" numbers, where the
      // exponent bits are used as normal (with bias-correction) and the
      // significand bits have the implicit leading bit applied to raise them,
      // which is skipped during encoding to allow for the "subnormal" space.
      Pair(U64, I16).new(
        sig_bits.bit_or(U64.one.bit_shl(@sig_bit_width))
        exp_bits.i16 - exp_bias - @sig_bit_width.i16
      )
    )

  :is Numeric.Convertible

  :is FloatingPoint.Representable
  :fun non exp_bit_width U8: 11
  :fun non sig_bit_width U8: 52

  :is FloatingPoint.Bounded(@)
  :fun non zero @'val:   compiler intrinsic
  :fun non one @'val:    compiler intrinsic
  :fun non max_value:    @from_bits(0x7fef_ffff_ffff_ffff)
  :fun non min_value:    @from_bits(0xffef_ffff_ffff_ffff)
  :fun non infinity:     @from_bits(0x7ff0_0000_0000_0000)
  :fun non neg_infinity: @from_bits(0xfff0_0000_0000_0000)
  :fun non nan:          @from_bits(0x7ff8_0000_0000_0000)
  :fun non epsilon:      @from_bits(0x3cb0_0000_0000_0000) // 2 ** -52
  :fun non half_epsilon: @from_bits(0x3ca0_0000_0000_0000) // 2 ** -53

  :is FloatingPoint.Arithmetic(@)
  :fun val log @: compiler intrinsic
  :fun val log2 @: compiler intrinsic
  :fun val log10 @: compiler intrinsic
  :fun val pow(y @) @: compiler intrinsic

  :is FloatingPoint.Comparable(@)
  :fun val is_nan
    @bits.bit_and(0x7ff0_0000_0000_0000) == 0x7ff0_0000_0000_0000 && // exponent
    @bits.bit_and(0x000f_ffff_ffff_ffff) != 0                        // mantissa
  :fun val is_infinite
    @bits.bit_and(0x7ff0_0000_0000_0000) == 0x7ff0_0000_0000_0000 && // exponent
    @bits.bit_and(0x000f_ffff_ffff_ffff) == 0                        // mantissa
  :fun val is_finite
    @bits.bit_and(0x7ff0_0000_0000_0000) != 0x7ff0_0000_0000_0000 // exponent

  :is FloatingPoint.Formattable(@)
