:: An actor adhering to the `AsioEvent.Actor` trait is known by the Savi
:: runtime as being able to receive asynchronous I/O event notifications.
::
:: In other words, the Savi runtime is capable of "waking up" such an actor
:: by sending it an `_asio_event` message, letting it know about some external
:: event that it has registered interest in by subscribing to certain events.
::
:: See the `AsioEvent` documentation for more information.
::
:: Note that an `AsioEvent.Actor` with an active event subscription cannot
:: be garbage-collected even if no other Savi actors hold a reference to it,
:: because the ASIO subsystem of the Savi runtime has a reference to it.
::
:: Further, if the `AsioEvent.Actor` has registered a "noisy" event
:: subscription, the program will not reach quiescence for natural termination.
:: This is the mechanism that keeps a server program open as long as it is
:: listening for new connections, or a keeps a program open to take periodic
:: action on a timer interval. Once the listener or timer (and the associated
:: noisy event subscription) are properly disposed of, the program would become
:: free to terminate as soon as all other actors reach natural quiesence.
:trait tag AsioEvent.Actor
  :be _asio_event(event AsioEvent)

:module AsioEvent.ID.Opaque
:alias AsioEvent.ID: CPointer(AsioEvent.ID.Opaque)

:: An `AsioEvent` is a special object created by the Savi runtime and passed
:: to the `AsioEvent.Actor._asio_event` behavior of an actor that has
:: registered interest in receiving asynchronous I/O events.
::
:: Examples of asynchronous I/O events include:
:: - notifying that a file descriptor has new data available to read
:: - notifying that a TCP listener has new pending connections to accept
:: - notifying that a specified timer interval has elapsed
::
:: We don't expose here in the core library any of the useful methods for
:: dealing with events, because those break memory safety. Any library that
:: wants to deal with creating, modifying, unsubscribing, or destroying events
:: will need to use FFI to access the runtime functions for doing so,
:: triggering the same manifest visibility as any other FFI usage
:: and encouraging users to audit those libraries to guarantee that
:: they expose a memory-safe interface and use capability security.
:struct val AsioEvent
  :let id AsioEvent.ID
  :let flags U32
  :let arg U32

  // This constructor is private to disallow any user code from calling it.
  // We don't even use it here in the core - this struct is only instantiated
  // in the underlying runtime when sending the `_asio_event` message.
  :new val _new(@id, @flags, @arg)

  :fun is_disposable: @flags == AsioEvent.Flags.dispose
  :fun is_readable: @flags.bit_and(AsioEvent.Flags.read) != 0
  :fun is_writable: @flags.bit_and(AsioEvent.Flags.write) != 0
  :fun is_timer: @flags.bit_and(AsioEvent.Flags.timer) != 0
  :fun is_signal: @flags.bit_and(AsioEvent.Flags.signal) != 0
  :fun is_oneshot: @flags.bit_and(AsioEvent.Flags.oneshot) != 0


:module AsioEvent.Flags
  :const dispose            U32: 0
  :const read               U32: 0b000000001
  :const write              U32: 0b000000010
  :const timer              U32: 0b000000100
  :const signal             U32: 0b000001000
  :const oneshot            U32: 0b100000000
  :const read_write         U32: 0b000000011
  :const read_write_oneshot U32: 0b100000011
