:struct Pair(A, B = A)
  :let first A
  :let second B
  :new (@first, @second)

  // Convenience alias for referring to the second element as the last element.
  :fun last: @second

  // Convenience aliases for when this is used as a key/value pair.
  :fun key: @first
  :fun value: @second

  // Convenience aliases for when this is used as a head/tail pair.
  :fun head: @first
  :fun tail: @second

  // Convenience aliases for when this is used as a high/low pair.
  :fun high: @first
  :fun low: @second
  :fun hi: @high
  :fun lo: @low

  :is TraceData
  :fun trace_data(trace TraceData.Observer)
    trace.object(0) -> (
      trace.property("first"
        case A <: (
        | TraceData'read | @first
        | Any'read |       TraceData.Untraceable.Maybe[@first]
        |                  TraceData.Untraceable
        )
      )
      trace.property("second"
        case A <: (
        | TraceData'read | @second
        | Any'read |       TraceData.Untraceable.Maybe[@second]
        |                  TraceData.Untraceable
        )
      )
    )
