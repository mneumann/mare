// TODO: Get rid of this hack:
:ffi InspectLibC
  :fun puts (string CPointer(U8)) I32
  :fun strlen (string CPointer(U8)) I32
  :fun snprintf (buffer CPointer(U8), buffer_size I32, fmt CPointer(U8), value F64) I32

:trait box _InspectEach
  // TODO: use each instead of size and []!
  :fun size USize
  :fun "[]!" (index USize) Any'box // TODO: use `box` instead of `Any'box`

:trait box _InspectEnum
  :fun member_name String

:trait box _InspectCustom
  :fun inspect_into (output String'iso) String'iso

// TODO: Move this out of prelude maybe? Does that make sense?
// TODO: Make this into a trait with "implement for"/typeclass style polymorphism
:primitive Inspect
  :fun "[]" (input Any'box) String'val // TODO: use `box` instead of `Any'box`
    @into(String.new_iso, input)

  :fun out (input Any'box) // TODO: use `box` instead of `Any'box`
    InspectLibC.puts(@[input].cstring)

  :fun into (output String'iso, input Any'box) String'iso // TODO: use `box` instead of `Any'box` // TODO: use something like Crystal IO instead of String?
    // case (
    // | input <: _InspectCustom | input.inspect_into(--output)
    // | input <: _InspectEnum | output << input.member_name, --output
    // | input <: U8'box    | @into(--output, input.u64) // TODO: unify into one integer clause?
    // | input <: U16'box   | @into(--output, input.u64) // TODO: unify into one integer clause?
    // | input <: U32'box   | @into(--output, input.u64) // TODO: unify into one integer clause?
    // | input <: USize'box | @into(--output, input.u64) // TODO: unify into one integer clause?
    // | input <: U64'box   |                            // TODO: unify into one integer clause?
    //   number = input.u64
    //   digits Array(U8) = []
    //   while (number > 0) (
    //     digits << (number % 10).u8 + '0'
    //     number = number / 10
    //   )
    //   digits.reverse_each -> (digit | output.push_byte(digit), None) // TODO: None should not be needed here
    //   if (digits.size == 0) (output.push_byte('0'))
    //   --output
    // | input <: I8'box    | @into(--output, input.i64) // TODO: unify into one integer clause?
    // | input <: I16'box   | @into(--output, input.i64) // TODO: unify into one integer clause?
    // | input <: I32'box   | @into(--output, input.i64) // TODO: unify into one integer clause?
    // | input <: ISize'box | @into(--output, input.i64) // TODO: unify into one integer clause?
    // | input <: I64'box   |                            // TODO: unify into one integer clause?
    //   number = input.i64
    //   positive = if (number >= 0) (number | output.push_byte('-'), number.abs)
    //   @into(--output, positive.u64)
    // | input <: F32'box | @_inspect_float_into(--output, input.f64) // TODO: unify into one float clause?
    // | input <: F64'box | @_inspect_float_into(--output, input.f64) // TODO: unify into one float clause?
    // | input <: String'box |
    //   output.push_byte('"')
    //   output << input.clone // TODO: show some characters as escaped.
    //   output.push_byte('"')
    //   --output
    // | input <: _InspectEach |
    //   output.push_byte('[')
    //   index USize = 0
    //   while (index < input.size) (
    //     if (index > 0) (output.push_byte(','), output.push_byte(' '))
    //     try (
    //       element = input[index]!
    //       output = @into(--output, element)
    //     )
    //     index += 1
    //   )
    //   output.push_byte(']')
    //   --output
    // // TODO: support inspection of more types
    // |
      // Otherwise, fall back to just printing the name of the type.
      output << reflection_of_runtime_type_name input
      --output
    // )

  :fun non _inspect_float_into (out String'iso, value F64) String'iso
    if value.is_negative (
      out.push_byte('-')
      value = value.negate
    )
    case (
    | value == 0 | out << "0.0"
    | value.is_finite | out = @_inspect_finite_positive_float_into(--out, value)
    | value.is_infinite | out << "Infinity"
    | out << "NaN"
    )
    --out

  :const _inspect_float_buffer_size USize: 128

  :fun non _inspect_finite_positive_float_into (out String'iso, value F64) String'iso
    // TODO: use grisu3 algorithm like Crystal does, for better performance
    // for those numbers that the algorithm handles, using this as a fallback:
    out.reserve(out.size + @_inspect_float_buffer_size)
    out_offset_cpointer = out.cpointer._unsafe._offset(out.size)
    buffer = InspectLibC.snprintf(
      out_offset_cpointer
      @_inspect_float_buffer_size.i32
      "%.17g".cstring
      value
    )
    out._size += InspectLibC.strlen(out_offset_cpointer).usize
    --out

