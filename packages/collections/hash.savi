:trait Hashable(A Hashable(A)'read)
  :fun hash USize
  :fun "=="(that A'box) Bool // TODO: move to Equatable trait

:trait non HashFunction(A)
  :fun non hash(x box->(A'aliased)) USize
  :fun non equal(x box->(A'aliased), y box->(A'aliased)) Bool

:: A hashing strategy that hashes based on structural equality of the value,
:: as implemented by the `hash` and `==` functions of the type.
:primitive HashEq(Q Hashable(Q)'read)
  :fun hash(x box->(Q'aliased)) USize: x.hash
  :fun equal(x box->(Q'aliased), y box->(Q'aliased)) Bool: x == y

:: A hashing strategy that hashes only the identity of the value,
:: considering two values to be equal only if they have the same identity.
:primitive HashIs(Q)
  :fun hash(x tag->Q) USize: (identity_digest_of x).hash
  :fun equal(x tag->Q, y tag->Q) Bool: x === y
