:actor Main
  :is PostgresNotify

  :let _env Env
  :let _conn PostgresConnection
  :var _cnt USize: 1

  :be on_query_response(qr QueryResponse'iso)
    r QueryResponse'box = --qr
    @_env.err.write(Inspect[@_cnt])
    @_cnt += 1

    r.rows.each -> (row | 
      @_env.err.print("-----------------------------------------------------------")
      row.columns.each -> (col |
        @_env.err.write("| ")
        case col <: (
        | Null |
          @_env.err.write("NULL")
        | Bytes |
          @_env.err.write(Inspect[col.as_string])
        )
        // @_env.err.write(Inspect[col.])
        @_env.err.write(" ")
      )
      @_env.err.print("|")
      @_env.err.print("-----------------------------------------------------------")
    )

    @_conn.query("SELECT random(), now();", @)

  :new (env)
    try (
	    conn = PostgresConnection.new(env, "127.0.0.1", env.args[1]!, env.args[2]!)
      @_conn = conn
      @_env = env
    )
    @_conn.query("SELECT random() as rand, now() as now", @)

