:import "bytes" (ByteStreamReader)

:module Null

:class iso DataRow
  :let columns Array((Bytes | Null))

  // XXX
  :fun box inspect String'iso
    output = String.new_iso
    output.push_byte('[')
    @columns.each -> (column |
      case column <: (
        | Null |
          output << "NULL"
        | Bytes |
          output << Inspect[column]
      )
      output << ", "
    )
    output.push_byte(']')
    --output

  :new iso from!(rd ByteStreamReader'ref)
    num_columns = rd.next_be_u16!.usize
    columns = Array((Bytes | Null)).from_fn(num_columns) -> (|
      len = rd.next_be_u32!.usize

      if (len == 0xFFFF_FFFF) (
        Null
      |
        --rd.next_bytes!(len)
      )
    )
    @columns = --columns

:struct FieldInfo
  :let name String
  :let oid I32
  :let attr_nr I16
  :let type_oid I32
  :let typlen I16
  :let atttypmod I32
  :let formatcode I16

  :new (@name, @oid, @attr_nr, @type_oid, @typlen, @atttypmod, @formatcode)

  :fun non from!(rd ByteStreamReader'ref)
    name = --rd.next_cstring!
    oid = rd.next_be_u32!.i32
    attr_nr = rd.next_be_u16!.i16
    type_oid = rd.next_be_u32!.i32
    typlen = rd.next_be_u16!.i16
    atttypmod = rd.next_be_u32!.i32
    formatcode = rd.next_be_u16!.i16

    FieldInfo.new(name, oid, attr_nr, type_oid, typlen, atttypmod, formatcode)

:class iso RowDescription
  :let fields Array(FieldInfo)

  :new iso from!(rd ByteStreamReader'ref)
    num_fields = rd.next_be_u16!.usize
    fields = Array(FieldInfo).from_fn(num_fields) -> (| 
      FieldInfo.from!(rd)
    )
    @fields = fields

