:class JsonReader
  :let _parser: JsonParser.new
  :let errors: JsonReaderErrors.new
  :new (source)
    @_parser.source = source

  :fun ref skip_value None
    @_parser.skip_value

  :fun ref unexpected_key None
    @_parser.skip_value
    @errors.unexpected_key_here

  :fun ref bool! Bool
    try (@_parser._read_bool! |
      @errors.expected_here("a boolean value")
      @skip_value
      error!
    )

  :fun ref string! String
    try (@_parser._read_string! |
      @errors.expected_here("a string value")
      @skip_value
      error!
    )

  :fun ref each_in_array! None
    :yields USize for None
    try (
      @_parser._read_each_in_array! -> (index |
        @errors.start_scope(index)
        yield index
        @errors.finish_scope
      )
    |
      @errors.expected_here("an array value")
      @skip_value
      error!
    )

  :fun ref each_in_object! None
    :yields String for None
    try (
      @_parser._read_each_in_object! -> (key |
        @errors.start_scope(key)
        yield key
        @errors.finish_scope
      )
    |
      @errors.expected_here("an object value")
      @skip_value
      error!
    )

:class JsonReaderErrors
  :let _path: JsonPath.new
  :let _list Array(JsonReaderError): []

  :fun is_empty: @_list.is_empty
  :fun inspect_into(out String'iso) String'iso
    @_list.each -> (error |
      out << "- "
      out = error.inspect_into(--out)
      out.push_byte('\n')
      None // TODO: this None should not be needed
    )
    --out

  :fun ref start_scope(segment): @_path.push(segment)
  :fun ref finish_scope: @_path.pop

  :fun ref unexpected_key_here
    @_list << JsonReaderErrorUnexpectedKeyHere.new(@_path.clone)
  :fun ref expected_here(what)
    @_list << JsonReaderErrorExpectedHere.new(@_path.clone, what)

:trait JsonReaderError
  :fun inspect_into(out String'iso) String'iso

:class JsonReaderErrorUnexpectedKeyHere
  :is JsonReaderError
  :let path JsonPath'val
  :new (@path)
  :fun inspect_into(out String'iso) String'iso
    out << "unexpected key encountered at path: "
    @path.inspect_into(--out)

:class JsonReaderErrorExpectedHere
  :is JsonReaderError
  :let path JsonPath'val
  :let what String
  :new (@path, @what)
  :fun inspect_into(out String'iso) String'iso
    out << "expected to read "
    out << @what
    out << " at path: "
    @path.inspect_into(--out)
