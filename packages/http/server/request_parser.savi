:import "bytes" (ByteStreamReader)

:enum RequestToken
  :const bit_width U8: 8 // TODO: the compiler should choose the smallest valid bit width by default if not explicitly specified
  :member RequestTokenMethod: 0
  :member RequestTokenUri: 1
  :member RequestTokenVersionString: 2
  :member RequestTokenHeaderName: 3
  :member RequestTokenHeaderValue: 4

:enum _RequestAt
  :const bit_width U8: 8 // TODO: the compiler should choose the smallest valid bit width by default if not explicitly specified
  :member _RequestAtStart: 0
  :member _RequestAtMethod: 1
  :member _RequestAtUri: 2
  :member _RequestAtVersionString: 3
  :member _RequestAtHeaderLineMaybe: 4
  :member _RequestAtHeaderName: 5
  :member _RequestAtHeaderSpacing: 6
  :member _RequestAtHeaderValue: 7
  :member _RequestAtEnd: 8

:class RequestParser
  :var _state _RequestAt: _RequestAtStart

  :fun ref reset: @_state = _RequestAtStart

  :fun ref parse!(stream ByteStreamReader)
    :yields RequestToken
    try (
      while (@_state != _RequestAtEnd) (
        @_state = case @_state == (
        | _RequestAtStart |
          _RequestAtMethod
        | _RequestAtMethod |
          stream.advance_while! -> (byte | byte != ' ')
          yield RequestTokenMethod
          stream.advance!(1) // consume the space
          _RequestAtUri
        | _RequestAtUri |
          stream.advance_while! -> (byte | byte != ' ')
          yield RequestTokenUri
          stream.advance!(1) // consume the space
          _RequestAtVersionString
        | _RequestAtVersionString |
          stream.advance_while! -> (byte | byte != '\r')
          if (stream.bytes_ahead < 2) error! // ensure the LF byte is ready too
          yield RequestTokenVersionString
          stream.advance!(2) // consume the CRLF
          _RequestAtHeaderLineMaybe
        | _RequestAtHeaderLineMaybe |
          if (stream.peek_byte! == '\r' && stream.peek_byte!(1) == '\n') (
            stream.advance!(2)
            _RequestAtEnd
          |
            _RequestAtHeaderName
          )
        | _RequestAtHeaderName |
          stream.advance_while! -> (byte | byte != ':')
          yield RequestTokenHeaderName
          stream.advance!(1) // consume the colon
          _RequestAtHeaderSpacing
        | _RequestAtHeaderSpacing |
          stream.advance_while! -> (byte | byte == ' ' || byte == '\t')
          _RequestAtHeaderValue
        | _RequestAtHeaderValue |
          stream.advance_while! -> (byte | byte != '\r')
          if (stream.bytes_ahead < 2) error! // ensure the LF byte is ready too
          yield RequestTokenHeaderValue
          stream.advance!(2) // consume the CRLF
          _RequestAtHeaderLineMaybe
        |
          // TODO: Refactor as exhaustive match to avoid unreachable else case
          _RequestAtStart
        )
        stream.mark_here
      )
    |
      // Rewind to the mark, in case we only got partway through a token.
      // We will pick up from here at the mark when we get a new data chunk.
      stream.rewind_to_marker
      error!
    )
