:import "bytes" (ByteStreamReader)

:class val Request
  :new iso
  :var method String: ""
  :var uri_string String: ""
  :var content_length USize: 0
  :var transfer_encoding: TransferEncodingIdentity
  :var connection_header: ConnectionHeaderKeepAlive // TODO: default to Close for HTTP/1.0

:enum TransferEncoding
  :const bit_width U8: 1
  :member TransferEncodingIdentity: 0
  :member TransferEncodingChunked: 1

:enum ConnectionHeader
  :const bit_width U8: 1
  :member ConnectionHeaderClose: 0
  :member ConnectionHeaderKeepAlive: 1

:enum RequestError // TODO: compile error when multiple members same value?
  :const bit_width U8: 8
  // TODO: Enums with short member names using a Swift-like leading dot syntax
  :member RequestErrorNone: 0
  :member RequestErrorUnsupportedMethod: 1
  :member RequestErrorURITooLong: 2
  :member RequestErrorUnsupportedVersion: 3
  :member RequestErrorUnsupportedTransferEncoding: 4
  :member RequestErrorUnsupportedConnectionHeader: 5
  :member RequestErrorInvalidContentLength: 6

:class RequestReader
  // These headers have a special meaning for an action we need to take here.
  // NOTE: They need to be specified in lowercase, both here and elsewhere.
  // However, we accept them on the wire in a case-insensitive way.
  :const _standard_headers Array(String)'val
    ["content-length", "transfer-encoding", "connection"]

  // TODO: Make these constants be properties of a shared config object instead.
  :const _max_uri_byte_size USize: 8192
  :const _supported_methods Array(String)'val
    ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]
  :const _collect_headers Array(String)'val: []

  :let _parser: RequestParser.new
  :var _request: Request.new
  :var _next_header String: ""
  :var _error: RequestErrorNone

  :fun ref _reset_state_and_pop_request Request'iso
    @_parser.reset
    @_next_header = ""
    @_error = RequestErrorNone

    // Pop the current request by displacing it with a new one
    @_request <<= Request.new

  :fun last_error: @_error

  :fun ref read!(stream ByteStreamReader) Request'iso
    @_parser.parse!(stream) -> (token |
      case token == (
      | RequestTokenMethod |
        try (
          @_request.method = @_supported_methods.find! -> (method |
            stream.is_token_equal_to(method)
          )
        |
          @_error = RequestErrorUnsupportedMethod
          error!
        )
      | RequestTokenUri |
        if (stream.token_byte_size <= @_max_uri_byte_size) (
          @_request.uri_string = stream.token_as_string
        |
          @_error = RequestErrorURITooLong
          error!
        )
      | RequestTokenVersionString |
        if stream.is_token_equal_to(b"HTTP/1.1") (
          // Version is okay - no action needed
          // TODO: Accept HTTP/1.0 and change `Connection` header behavior
        |
          @_error = RequestErrorUnsupportedVersion
          error!
        )
      | RequestTokenHeaderName |
        try (
          @_next_header = @_standard_headers.find! -> (name |
            stream.is_token_ascii_lowercase_equal_to(name)
          )
        | try (
          @_collect_headers.find! -> (name |
            stream.is_token_ascii_lowercase_equal_to(name)
          )
        |
          "" // ignore all other header names
        ))
      | RequestTokenHeaderValue |
        case (
        // We can safely use `is` here because we have ensured that each
        // such next_header we may compare against here is the "stringtabbed"
        // instance of it (i.e. each is a single static memory pointer address).
        | @_next_header === "" | // do nothing; ignore this header
        | @_next_header === "content-length" |
          try (
            @_request.content_length = stream.token_as_positive_integer!.usize
          |
            @_error = RequestErrorInvalidContentLength
            error!
          )
        | @_next_header === "transfer-encoding" |
          if stream.is_token_ascii_lowercase_equal_to(b"chunked") (
            @_request.transfer_encoding = TransferEncodingChunked
          |
            @_error = RequestErrorUnsupportedTransferEncoding
            error!
          )
        | @_next_header === "connection" |
          case (
          | stream.is_token_ascii_lowercase_equal_to(b"close") |
            @_request.connection_header = ConnectionHeaderClose
          | stream.is_token_ascii_lowercase_equal_to(b"keep-alive") |
            @_request.connection_header = ConnectionHeaderKeepAlive
          |
            @_error = RequestErrorUnsupportedConnectionHeader
            error!
          )
        |
          // TODO: collect this header
        )
      | None // TODO: exhaustive match
      )
    )

    // We're finished parsing and building the request!
    @_reset_state_and_pop_request
