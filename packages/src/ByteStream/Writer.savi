:: This class provides a way to buffer writes to a data sink, in the form of
:: chunks that arrive one at a time, then get flushed all together to the sink.
::
:: This batched writing pattern amortizes the cost of writing to the sink.
:: but its up to the caller to determine when to `flush`, based on whatever
:: performance tuning and/or heuristics deemed appropriate for the application.
:class ByteStream.Writer
  :is ByteStream.Writable

  :let target ByteStream.Sink
  :new (@target)

  :: Add a chunk of bytes to the stream.
  ::
  :: It won't actually get written until the `flush` method is called.
  :fun ref "<<"(chunk Bytes'val)
    @target.write_bytes(chunk)
    @

  :: Try to write all data that is currently buffered to the `target` sink.
  ::
  :: If all data was successfully flushed in the target, it returns True.
  :: Otherwise, some data was not written and this must be called again later.
  ::
  :: If the target is not in a writable state when calling this method,
  :: then no data will be written and it was useless to make this call.
  :fun ref flush Bool
    @target.write_flush
