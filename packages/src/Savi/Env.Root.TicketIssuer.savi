:actor Env.Root.TicketIssuer
  :new _new // private constructor for security

  // TODO: Use a generic Accessible trait
  :be access(courier Env.Root.TicketIssuer.Courier.Any): courier.call(@)

  :var _issued_ticket_types Array(Any'non): []

  :fun ref mark_as_issued_if_available!(ticket_type Any'non)
    error! if @_issued_ticket_types.includes(ticket_type)
    @_issued_ticket_types.push(ticket_type)

:trait iso Env.Root.TicketIssuer.Ticket
  :new iso new_from_issuer!(issuer Env.Root.TicketIssuer'ref)

// TODO: Probably remove this glue trait when we have proper lambdas.
:trait val Env.Root.TicketIssuer.Courier.Any
  :fun val call(issuer Env.Root.TicketIssuer'ref) None

// TODO: Probably remove this glue class when we have proper lambdas.
:class val Env.Root.TicketIssuer.Courier(T Env.Root.TicketIssuer.Ticket'iso)
  :let recipient Env.Root.TicketIssuer.Recipient(T)
  :new val (@recipient)
  :fun val call(issuer Env.Root.TicketIssuer'ref) None
    @recipient.accept_ticket(try T.new_from_issuer!(issuer))

// TODO: Probably remove this glue trait when we have proper lambdas.
:trait tag Env.Root.TicketIssuer.Recipient(T Any'iso)
  :be accept_ticket(ticket (T | None))
