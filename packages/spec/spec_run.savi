:trait val SpecRunAny
  :fun val run(specs Specs) None // TODO: fun box instead of fun val

:class val SpecRun(A Spec)
  :is SpecRunAny
  :let env Env
  :new (@env)

  // TODO: avoid this indirection
  :fun _new_spec(specs) A
    A.new(TestHelper.new(@env, specs, A.describes, ""))

  :: Run all spec features for the Spec type indicated by the type argument,
  :: using the given Env to construct an instance of that Spec type.
  ::
  :: A summary of successes and failures will be printed to `env.out`.
  :: If there are one or more failures, `env.exit_code` will be set accordingly.
  :fun val run(specs Specs) None // TODO: fun box instead of fun val
    type ReflectionOfType(A) = (reflection_of_type @_new_spec(specs))
    features = type.features.select -> (feature |
      feature.tags.includes("it")
    )

    specs.spec_began(A.describes, features.size)

    features.each -> (feature |
      SpecExampleRunner(A).new(@env, specs, feature)
    )

:actor SpecExampleRunner(A Spec)
  :let example ReflectionFeatureOfType(A)

  :new (env, specs, @example)
    helper = TestHelper.new(env, specs, A.describes, @example.name)
    spec = A.new(helper)

    specs.example_began(A.describes, @example.name)

    called = @example.maybe_call_mutator(spec)
    if called.not (
      Specs._bug(env, "failed to call a spec feature")
    )

    specs.example_close(A.describes, @example.name)
